/*
	Generated by KBEngine!
	Please do not modify this file!
	Please inherit this module, such as: (class Avatar : AvatarBase)
	tools = kbcmd
*/

namespace KBEngine
{
	using UnityEngine;
	using System;
	using System.Collections;
	using System.Collections.Generic;

	// defined in */scripts/entity_defs/Avatar.def
	// Please inherit and implement "class Avatar : AvatarBase"
	public abstract class AvatarBase : Entity
	{
		public EntityBaseEntityCall_AvatarBase baseEntityCall = null;
		public EntityCellEntityCall_AvatarBase cellEntityCall = null;

		public Byte Country = 0;
		public virtual void onCountryChanged(Byte oldValue) {}
		public Int32 Gold = 0;
		public virtual void onGoldChanged(Int32 oldValue) {}
		public Int16 Level = 0;
		public virtual void onLevelChanged(Int16 oldValue) {}
		public string PlayerName = "";
		public virtual void onPlayerNameChanged(string oldValue) {}
		public Byte RoleType = 0;
		public virtual void onRoleTypeChanged(Byte oldValue) {}
		public Byte Sex = 0;
		public virtual void onSexChanged(Byte oldValue) {}
		public UInt32 modelID = 0;
		public virtual void onModelIDChanged(UInt32 oldValue) {}
		public Byte modelScale = 30;
		public virtual void onModelScaleChanged(Byte oldValue) {}
		public string name = "";
		public virtual void onNameChanged(string oldValue) {}
		public UInt16 own_val = 0;
		public virtual void onOwn_valChanged(UInt16 oldValue) {}
		public UInt32 spaceUType = 0;
		public virtual void onSpaceUTypeChanged(UInt32 oldValue) {}
		public UInt32 uid = 0;
		public virtual void onUidChanged(UInt32 oldValue) {}
		public UInt32 utype = 0;
		public virtual void onUtypeChanged(UInt32 oldValue) {}


		public AvatarBase()
		{
		}

		public override void onGetBase()
		{
			baseEntityCall = new EntityBaseEntityCall_AvatarBase(id, className);
		}

		public override void onGetCell()
		{
			cellEntityCall = new EntityCellEntityCall_AvatarBase(id, className);
		}

		public override void onLoseCell()
		{
			cellEntityCall = null;
		}

		public override EntityCall getBaseEntityCall()
		{
			return baseEntityCall;
		}

		public override EntityCall getCellEntityCall()
		{
			return cellEntityCall;
		}

		public override void onRemoteMethodCall(MemoryStream stream)
		{
			ScriptModule sm = EntityDef.moduledefs["Avatar"];

			UInt16 methodUtype = 0;
			UInt16 componentPropertyUType = 0;

			if(sm.useMethodDescrAlias)
			{
				componentPropertyUType = stream.readUint8();
				methodUtype = stream.readUint8();
			}
			else
			{
				componentPropertyUType = stream.readUint16();
				methodUtype = stream.readUint16();
			}

			Method method = null;

			if(componentPropertyUType == 0)
			{
				method = sm.idmethods[methodUtype];
			}
			else
			{
				Property pComponentPropertyDescription = sm.idpropertys[componentPropertyUType];
				switch(pComponentPropertyDescription.properUtype)
				{
					default:
						break;
				}

				return;
			}

			switch(method.methodUtype)
			{
				default:
					break;
			};
		}

		public override void onUpdatePropertys(MemoryStream stream)
		{
			ScriptModule sm = EntityDef.moduledefs["Avatar"];
			Dictionary<UInt16, Property> pdatas = sm.idpropertys;

			while(stream.length() > 0)
			{
				UInt16 _t_utype = 0;
				UInt16 _t_child_utype = 0;

				{
					if(sm.usePropertyDescrAlias)
					{
						_t_utype = stream.readUint8();
						_t_child_utype = stream.readUint8();
					}
					else
					{
						_t_utype = stream.readUint16();
						_t_child_utype = stream.readUint16();
					}
				}

				Property prop = null;

				if(_t_utype == 0)
				{
					prop = pdatas[_t_child_utype];
				}
				else
				{
					Property pComponentPropertyDescription = pdatas[_t_utype];
					switch(pComponentPropertyDescription.properUtype)
					{
						default:
							break;
					}

					return;
				}

				switch(prop.properUtype)
				{
					case 20:
						Byte oldval_Country = Country;
						Country = stream.readUint8();

						if(prop.isBase())
						{
							if(inited)
								onCountryChanged(oldval_Country);
						}
						else
						{
							if(inWorld)
								onCountryChanged(oldval_Country);
						}

						break;
					case 23:
						Int32 oldval_Gold = Gold;
						Gold = stream.readInt32();

						if(prop.isBase())
						{
							if(inited)
								onGoldChanged(oldval_Gold);
						}
						else
						{
							if(inWorld)
								onGoldChanged(oldval_Gold);
						}

						break;
					case 22:
						Int16 oldval_Level = Level;
						Level = stream.readInt16();

						if(prop.isBase())
						{
							if(inited)
								onLevelChanged(oldval_Level);
						}
						else
						{
							if(inWorld)
								onLevelChanged(oldval_Level);
						}

						break;
					case 18:
						string oldval_PlayerName = PlayerName;
						PlayerName = stream.readUnicode();

						if(prop.isBase())
						{
							if(inited)
								onPlayerNameChanged(oldval_PlayerName);
						}
						else
						{
							if(inWorld)
								onPlayerNameChanged(oldval_PlayerName);
						}

						break;
					case 19:
						Byte oldval_RoleType = RoleType;
						RoleType = stream.readUint8();

						if(prop.isBase())
						{
							if(inited)
								onRoleTypeChanged(oldval_RoleType);
						}
						else
						{
							if(inWorld)
								onRoleTypeChanged(oldval_RoleType);
						}

						break;
					case 21:
						Byte oldval_Sex = Sex;
						Sex = stream.readUint8();

						if(prop.isBase())
						{
							if(inited)
								onSexChanged(oldval_Sex);
						}
						else
						{
							if(inWorld)
								onSexChanged(oldval_Sex);
						}

						break;
					case 40001:
						Vector3 oldval_direction = direction;
						direction = stream.readVector3();

						if(prop.isBase())
						{
							if(inited)
								onDirectionChanged(oldval_direction);
						}
						else
						{
							if(inWorld)
								onDirectionChanged(oldval_direction);
						}

						break;
					case 41006:
						UInt32 oldval_modelID = modelID;
						modelID = stream.readUint32();

						if(prop.isBase())
						{
							if(inited)
								onModelIDChanged(oldval_modelID);
						}
						else
						{
							if(inWorld)
								onModelIDChanged(oldval_modelID);
						}

						break;
					case 41007:
						Byte oldval_modelScale = modelScale;
						modelScale = stream.readUint8();

						if(prop.isBase())
						{
							if(inited)
								onModelScaleChanged(oldval_modelScale);
						}
						else
						{
							if(inWorld)
								onModelScaleChanged(oldval_modelScale);
						}

						break;
					case 41003:
						string oldval_name = name;
						name = stream.readUnicode();

						if(prop.isBase())
						{
							if(inited)
								onNameChanged(oldval_name);
						}
						else
						{
							if(inWorld)
								onNameChanged(oldval_name);
						}

						break;
					case 24:
						UInt16 oldval_own_val = own_val;
						own_val = stream.readUint16();

						if(prop.isBase())
						{
							if(inited)
								onOwn_valChanged(oldval_own_val);
						}
						else
						{
							if(inWorld)
								onOwn_valChanged(oldval_own_val);
						}

						break;
					case 40000:
						Vector3 oldval_position = position;
						position = stream.readVector3();

						if(prop.isBase())
						{
							if(inited)
								onPositionChanged(oldval_position);
						}
						else
						{
							if(inWorld)
								onPositionChanged(oldval_position);
						}

						break;
					case 40002:
						stream.readUint32();
						break;
					case 41001:
						UInt32 oldval_spaceUType = spaceUType;
						spaceUType = stream.readUint32();

						if(prop.isBase())
						{
							if(inited)
								onSpaceUTypeChanged(oldval_spaceUType);
						}
						else
						{
							if(inWorld)
								onSpaceUTypeChanged(oldval_spaceUType);
						}

						break;
					case 41004:
						UInt32 oldval_uid = uid;
						uid = stream.readUint32();

						if(prop.isBase())
						{
							if(inited)
								onUidChanged(oldval_uid);
						}
						else
						{
							if(inWorld)
								onUidChanged(oldval_uid);
						}

						break;
					case 41005:
						UInt32 oldval_utype = utype;
						utype = stream.readUint32();

						if(prop.isBase())
						{
							if(inited)
								onUtypeChanged(oldval_utype);
						}
						else
						{
							if(inWorld)
								onUtypeChanged(oldval_utype);
						}

						break;
					default:
						break;
				};
			}
		}

		public override void callPropertysSetMethods()
		{
			ScriptModule sm = EntityDef.moduledefs["Avatar"];
			Dictionary<UInt16, Property> pdatas = sm.idpropertys;

			Byte oldval_Country = Country;
			Property prop_Country = pdatas[4];
			if(prop_Country.isBase())
			{
				if(inited && !inWorld)
					onCountryChanged(oldval_Country);
			}
			else
			{
				if(inWorld)
				{
					if(prop_Country.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onCountryChanged(oldval_Country);
					}
				}
			}

			Int32 oldval_Gold = Gold;
			Property prop_Gold = pdatas[5];
			if(prop_Gold.isBase())
			{
				if(inited && !inWorld)
					onGoldChanged(oldval_Gold);
			}
			else
			{
				if(inWorld)
				{
					if(prop_Gold.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onGoldChanged(oldval_Gold);
					}
				}
			}

			Int16 oldval_Level = Level;
			Property prop_Level = pdatas[6];
			if(prop_Level.isBase())
			{
				if(inited && !inWorld)
					onLevelChanged(oldval_Level);
			}
			else
			{
				if(inWorld)
				{
					if(prop_Level.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onLevelChanged(oldval_Level);
					}
				}
			}

			string oldval_PlayerName = PlayerName;
			Property prop_PlayerName = pdatas[7];
			if(prop_PlayerName.isBase())
			{
				if(inited && !inWorld)
					onPlayerNameChanged(oldval_PlayerName);
			}
			else
			{
				if(inWorld)
				{
					if(prop_PlayerName.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onPlayerNameChanged(oldval_PlayerName);
					}
				}
			}

			Byte oldval_RoleType = RoleType;
			Property prop_RoleType = pdatas[8];
			if(prop_RoleType.isBase())
			{
				if(inited && !inWorld)
					onRoleTypeChanged(oldval_RoleType);
			}
			else
			{
				if(inWorld)
				{
					if(prop_RoleType.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onRoleTypeChanged(oldval_RoleType);
					}
				}
			}

			Byte oldval_Sex = Sex;
			Property prop_Sex = pdatas[9];
			if(prop_Sex.isBase())
			{
				if(inited && !inWorld)
					onSexChanged(oldval_Sex);
			}
			else
			{
				if(inWorld)
				{
					if(prop_Sex.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onSexChanged(oldval_Sex);
					}
				}
			}

			Vector3 oldval_direction = direction;
			Property prop_direction = pdatas[2];
			if(prop_direction.isBase())
			{
				if(inited && !inWorld)
					onDirectionChanged(oldval_direction);
			}
			else
			{
				if(inWorld)
				{
					if(prop_direction.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onDirectionChanged(oldval_direction);
					}
				}
			}

			UInt32 oldval_modelID = modelID;
			Property prop_modelID = pdatas[10];
			if(prop_modelID.isBase())
			{
				if(inited && !inWorld)
					onModelIDChanged(oldval_modelID);
			}
			else
			{
				if(inWorld)
				{
					if(prop_modelID.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onModelIDChanged(oldval_modelID);
					}
				}
			}

			Byte oldval_modelScale = modelScale;
			Property prop_modelScale = pdatas[11];
			if(prop_modelScale.isBase())
			{
				if(inited && !inWorld)
					onModelScaleChanged(oldval_modelScale);
			}
			else
			{
				if(inWorld)
				{
					if(prop_modelScale.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onModelScaleChanged(oldval_modelScale);
					}
				}
			}

			string oldval_name = name;
			Property prop_name = pdatas[12];
			if(prop_name.isBase())
			{
				if(inited && !inWorld)
					onNameChanged(oldval_name);
			}
			else
			{
				if(inWorld)
				{
					if(prop_name.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onNameChanged(oldval_name);
					}
				}
			}

			UInt16 oldval_own_val = own_val;
			Property prop_own_val = pdatas[13];
			if(prop_own_val.isBase())
			{
				if(inited && !inWorld)
					onOwn_valChanged(oldval_own_val);
			}
			else
			{
				if(inWorld)
				{
					if(prop_own_val.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onOwn_valChanged(oldval_own_val);
					}
				}
			}

			Vector3 oldval_position = position;
			Property prop_position = pdatas[1];
			if(prop_position.isBase())
			{
				if(inited && !inWorld)
					onPositionChanged(oldval_position);
			}
			else
			{
				if(inWorld)
				{
					if(prop_position.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onPositionChanged(oldval_position);
					}
				}
			}

			UInt32 oldval_spaceUType = spaceUType;
			Property prop_spaceUType = pdatas[14];
			if(prop_spaceUType.isBase())
			{
				if(inited && !inWorld)
					onSpaceUTypeChanged(oldval_spaceUType);
			}
			else
			{
				if(inWorld)
				{
					if(prop_spaceUType.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onSpaceUTypeChanged(oldval_spaceUType);
					}
				}
			}

			UInt32 oldval_uid = uid;
			Property prop_uid = pdatas[15];
			if(prop_uid.isBase())
			{
				if(inited && !inWorld)
					onUidChanged(oldval_uid);
			}
			else
			{
				if(inWorld)
				{
					if(prop_uid.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onUidChanged(oldval_uid);
					}
				}
			}

			UInt32 oldval_utype = utype;
			Property prop_utype = pdatas[16];
			if(prop_utype.isBase())
			{
				if(inited && !inWorld)
					onUtypeChanged(oldval_utype);
			}
			else
			{
				if(inWorld)
				{
					if(prop_utype.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onUtypeChanged(oldval_utype);
					}
				}
			}

		}
	}
}